sched.h at 1284-1285:
    ++ 1284 /*New field added by Dean Liu, a counter*/
    ++ 1285 int ctx;

fork.c at 2297:
    ++ 2297 p->ctx = 0;
    https://www.quora.com/How-does-the-fork-system-call-in-Linux-work
    [fork()->clone()->]do_fork()->_do_fork()->copy_process() ([...] unknown source code)

core.c at 4055
    ++ 4055 next->ctx++;
    schedule()->__schedule()

base.c at 3096-3112 3209
    ++ 3209 REG("ctx", S_IRUSR|S_IWUSR, proc_ctx_operations)
    ++ 3096-3112
    static ssize_t ctx_read(struct file *file, char __user *buf,
			size_t count, loff_t *ppos)
    {
        struct task_struct *task;
        int ctx;
        size_t len;
        char buffer[64];
        task = get_proc_task(file_inode(file));
        if (!task)
            return -ESRCH;
        ctx = task->ctx;
        len = snprintf(buffer, sizeof(buffer), "%d", ctx);
        return simple_read_from_buffer(buf, count, ppos, buffer, len);
    }
    static const struct file_operations proc_ctx_operations = {
        .read = ctx_read,
    };
    118-125 struct pid_entry
    3102-3209 struct tgid_base_stuff
